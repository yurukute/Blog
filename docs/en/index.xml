<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Noob&#39;s Blog</title>
    <link>https://yurukute.github.io/Blog/en/</link>
    <description>Recent content on Noob&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 15 Feb 2021 18:49:58 +0700</lastBuildDate><atom:link href="https://yurukute.github.io/Blog/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Explosive Sum</title>
      <link>https://yurukute.github.io/Blog/en/post/explosivesum/</link>
      <pubDate>Mon, 15 Feb 2021 18:49:58 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/explosivesum/</guid>
      <description>Problem Source: Codewars How many ways can you make the sum of a number?
From wikipedia: https://en.wikipedia.org/wiki/Partition_(number_theory)#  In number theory and combinatorics, a partition of a positive integer n, also called an integer partition, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition. Example:
 Input: 4 Output: 5 //4, 3+1, 2+2, 2+1+1, 1+1+1+1 Solution It would be very slow if you enumerate all the partitions when $n$ is large so i&amp;rsquo;ll use dynamic programing instead (Oω&amp;lt;)☆.</description>
    </item>
    
    <item>
      <title>Fibonacci</title>
      <link>https://yurukute.github.io/Blog/en/post/fibonacci/</link>
      <pubDate>Fri, 12 Feb 2021 04:39:49 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/fibonacci/</guid>
      <description>Problem Source: Codeforces Find the $n^th$ Fibonacci number modulo $10^9+7$. So, you need to find $F_n$ in the sequence defined as $$
\begin{aligned} F_0 &amp;amp; = 0\\
F_1 &amp;amp; = 1\\
F_i &amp;amp; = F_{i-1} + F_{i-2} (i &amp;gt;= 2) \end{aligned} $$ Example:
Input: 50 Output: 586268941 Solution Approach 1: Dynamic Programing Using fibonacci&amp;rsquo;s difference equation as a recurrence relation, i can write to a program like this:
int f0 = 0, f1 = 1, fn; for(int i = 2; i &amp;lt;= n; i++){ fn = f0 + f1; f0 = f1; f1 = fn; } return fn; This code&amp;rsquo;s complexity is $O(n)$ which is fine with $n &amp;lt;= 5.</description>
    </item>
    
    <item>
      <title>Total ways make change</title>
      <link>https://yurukute.github.io/Blog/en/post/countchange/</link>
      <pubDate>Tue, 09 Feb 2021 13:12:29 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/countchange/</guid>
      <description>Problem Source: Leetcode , Codewars You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.
For example:
Input: amount = 5, coins = {1,2,5} Output: 4 //{5, 2+2+1, 2+1+1+1, 1+1+1+1+1} Solution We&amp;rsquo;ll go through at each stage to considera certain coin and see how it changes the total amount of ways that can make change.</description>
    </item>
    
    <item>
      <title>Fewest coins make change</title>
      <link>https://yurukute.github.io/Blog/en/post/coinchange/</link>
      <pubDate>Mon, 08 Feb 2021 15:29:18 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/coinchange/</guid>
      <description>Problem Source: Leetcode You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.
Examples:
Input: coins = {1,2,5}, amount = 11 Output: 3 //2 đồng 5 và 1 đồng 1 Input: coins = {2}, amount = 3 Output: -1 Solution Approach 1: Brute force By above example, amount = 11.</description>
    </item>
    
    <item>
      <title>Bitwise operators&#39; application</title>
      <link>https://yurukute.github.io/Blog/en/post/bitwise/</link>
      <pubDate>Fri, 29 Jan 2021 20:52:33 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/bitwise/</guid>
      <description>Summary    Name Operator Description      AND &amp;amp; Both bits are 1, return 1. Otherwise, return 0.   OR \ One of both bit is 1, return 1. Otherwise, return 0.   XOR ^ Two bits are different return 1. Otherwise, return 0.   NOT ~ Flip bit, 0 becomes 1, 1 becomes 0    Shift left &amp;lt;&amp;lt; Shifts all the bits to the left    Right left &amp;gt;&amp;gt; Shifts all the bits to the right     Application Integer Change bit //Set nth bit x |= (1 &amp;lt;&amp;lt; n); //Set the right-most 0 bit to 1 x |= (x+1); //Unset nth bit x &amp;amp;= ~(1 &amp;lt;&amp;lt; n); //Set the right-most 1 bit to 0 x &amp;amp;= (x-1); //Toggle nth bit x ^= (1 &amp;lt;&amp;lt; n); //Get the mth bit of n (x &amp;gt;&amp;gt; n) &amp;amp; 1; //Swap Adjacent bits ((x &amp;amp; 10101010) &amp;gt;&amp;gt; 1) | ((x &amp;amp; 01010101) &amp;lt;&amp;lt; 1); Multiplication / Division x by $2^n$ x &amp;lt;&amp;lt; n //multiplication x &amp;gt;&amp;gt; n //division Round up to the next power of two x--; x |= x &amp;gt;&amp;gt; 1; x |= x &amp;gt;&amp;gt; 2; x |= x &amp;gt;&amp;gt; 4; x |= x &amp;gt;&amp;gt; 8; x |= x &amp;gt;&amp;gt; 16; x++; Round down to the next power of two x--; x |= x &amp;gt;&amp;gt; 1; x |= x &amp;gt;&amp;gt; 2; x |= x &amp;gt;&amp;gt; 4; x |= x &amp;gt;&amp;gt; 8; x |= x &amp;gt;&amp;gt; 16; x++; x = x &amp;gt;&amp;gt; 1; //the same with the code above but added this line Floor x x &amp;gt;&amp;gt; 0; 6.</description>
    </item>
    
    <item>
      <title>Factorial decomposition</title>
      <link>https://yurukute.github.io/Blog/en/post/factorialdecomp/</link>
      <pubDate>Tue, 26 Jan 2021 00:08:20 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/factorialdecomp/</guid>
      <description>Problem Source: Codewars The aim of the kata is to decompose $n!$(factorial n) into its prime factors. For example:
Input: n = 12 Output: 2^10 * 3^5 * 5^2 * 7 * 11 Note that $n$ can reach 4000 and, of course, 4000! would be very big with more than 12000 digits ∑(O_O;)
Solution Idea By definition, the factorial of a positive integer $n$, denoted by $n!$, is the product of all positive integers less than or equal to $n$: $$12!</description>
    </item>
    
    <item>
      <title>Primes in numbers</title>
      <link>https://yurukute.github.io/Blog/en/post/primesinnumbers/</link>
      <pubDate>Sat, 23 Jan 2021 20:46:09 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/primesinnumbers/</guid>
      <description>Problem Codewars Given a positive number n &amp;gt; 1 find the prime factor decomposition of n. The result will be a string with the following form:
($p_1$**$n_1$)($p_2$**$n_2$)&amp;hellip;($p_k$**$n_k$)
where
 a**b means $a^b$ $p_i$ in increasing order $n_i$ empty if n(i) is 1.  Example:
Input: n = 86240 Output: (2**5)(5)(7**2)(11) Solution Generally, in order to calculate all of the prime factors of a number, you have to go about dividing the original number by its smallest prime factor.</description>
    </item>
    
    <item>
      <title>T-Primes</title>
      <link>https://yurukute.github.io/Blog/en/post/t-primes/</link>
      <pubDate>Fri, 22 Jan 2021 15:39:07 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/t-primes/</guid>
      <description>Promblem Source: Codeforces We know that prime numbers are positive integers that have exactly two distinct positive divisors. Similarly, we&amp;rsquo;ll call a positive integer $t$ Т-prime, if $t$ has exactly three distinct positive divisors.
You are given an array of $n$ positive integers. For each of them determine whether it is Т-prime or not.
Examples
Input: 3 4 5 6 Output: YES NO NO Solution First, we need to find all prime numbers from 2 to $\sqrt{x}$.</description>
    </item>
    
    <item>
      <title>Sum by Factors</title>
      <link>https://yurukute.github.io/Blog/en/post/sumbyfactors/</link>
      <pubDate>Mon, 18 Jan 2021 16:50:30 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/sumbyfactors/</guid>
      <description>The problem: Source: codewars Given an array of positive or negative integers $I = [i_1, .., i_n]$ , you have to produce a sorted array P of the form [ [$p$, sum of all $i_j$ of $I$ for which $p$ is a prime factor ($p$ positive) of $i_j$] &amp;hellip;]
P will be sorted by increasing order of the prime numbers. The final result has to be given as a string in Java, C#, C, C++ and as an array of arrays in other languages.</description>
    </item>
    
    <item>
      <title>Maximum subarray sum</title>
      <link>https://yurukute.github.io/Blog/en/post/maxsubarraysum/</link>
      <pubDate>Sun, 17 Jan 2021 20:45:26 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/maxsubarraysum/</guid>
      <description>Problem: Source: Codewars.com The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:
maxSequence({-2, 1, -3, 4, -1, 2, 1, -5, 4}); //should be 6: {4, -1, 2, 1} Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://yurukute.github.io/Blog/en/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/archive/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://yurukute.github.io/Blog/en/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/search/</guid>
      <description>search</description>
    </item>
    
  </channel>
</rss>
