<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamic Programing on Noob&#39;s Blog</title>
    <link>https://yurukute.github.io/Blog/en/tags/dynamic-programing/</link>
    <description>Recent content in Dynamic Programing on Noob&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Feb 2021 13:12:29 +0700</lastBuildDate><atom:link href="https://yurukute.github.io/Blog/en/tags/dynamic-programing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Total ways make change</title>
      <link>https://yurukute.github.io/Blog/en/post/countchange/</link>
      <pubDate>Tue, 09 Feb 2021 13:12:29 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/countchange/</guid>
      <description>Problem Source: Leetcode, Codewars
You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.
For example:
Input: amount = 5, coins = {1,2,5} Output: 4 //{5, 2+2+1, 2+1+1+1, 1+1+1+1+1} Solution We&amp;rsquo;ll go through at each stage to considera certain coin and see how it changes the total amount of ways that can make change.</description>
    </item>
    
    <item>
      <title>Fewest coins make change</title>
      <link>https://yurukute.github.io/Blog/en/post/coinchange/</link>
      <pubDate>Mon, 08 Feb 2021 15:29:18 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/coinchange/</guid>
      <description>Problem Source: Leetcode
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.
Examples:
Input: coins = {1,2,5}, amount = 11 Output: 3 //2 đồng 5 và 1 đồng 1 Input: coins = {2}, amount = 3 Output: -1 Solution Approach 1: Brute force By above example, amount = 11.</description>
    </item>
    
    <item>
      <title>Maximum subarray sum</title>
      <link>https://yurukute.github.io/Blog/en/post/maxsubarraysum/</link>
      <pubDate>Sun, 17 Jan 2021 20:45:26 +0700</pubDate>
      
      <guid>https://yurukute.github.io/Blog/en/post/maxsubarraysum/</guid>
      <description>Problem: Source: Codewars.com
The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:
maxSequence({-2, 1, -3, 4, -1, 2, 1, -5, 4}); //should be 6: {4, -1, 2, 1} Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.</description>
    </item>
    
  </channel>
</rss>
